/*
 Copyright (c) 2014 Ron Coleman

 Permission is hereby granted, free of charge, to any person obtaining
 a copy of this software and associated documentation files (the
 "Software"), to deal in the Software without restriction, including
 without limitation the rights to use, copy, modify, merge, publish,
 distribute, sublicense, and/or sell copies of the Software, and to
 permit persons to whom the Software is furnished to do so, subject to
 the following conditions:

 The above copyright notice and this permission notice shall be
 included in all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
package charlie.server;

import java.io.Serializable;

/**
 * This class implements a ticket which the user receive upon successful login.
 * @author Ron Coleman
 */
public class Ticket implements Serializable {
    protected final long number;
    protected double bankroll;
    protected int usage = 0;

    /**
     * Constructor
     * @param number Serial number
     * @param bankroll Bankroll
     */
    public Ticket(long number,double bankroll) {
        this.number = number;
        this.bankroll = bankroll;
    }

    /**
     * Increments the use count.
     */
    public void use() {
        usage++;
    }
    
    /**
     * Gets the usage count.
     * @return Use count
     */
    public int getUsage() {
        return usage;
    }

    /**
     * Gets the serial number.
     * @return Long
     */
    public Long getNumber() {
        return number;
    }

    /**
     * Gets the bankroll.
     * @return Double
     */
    public Double getBankroll() {
        return bankroll;
    }

    /**
     * Sets the bankroll
     * @param bankroll Bankroll
     */
    public void setBankroll(Double bankroll) {
        this.bankroll = bankroll;
    }
    
    /**
     * Tests if two tickets are equal.
     * @param obj Ticket
     * @return True if equal and false otherwise
     */
    @Override
    public boolean equals(Object obj) {
        if(!(obj instanceof Ticket))
            return false;
        
        Ticket ticket = (Ticket)obj;
        return ticket.number == number;
    }

    /**
     * Computes the hash code (generated by NB).
     * @return 
     */
    @Override
    public int hashCode() {
        int hash = 3;
        hash = 79 * hash + (int) (this.number ^ (this.number >>> 32));
        return hash;
    }
    
    /**
     * Converts ticket to string.
     * @return String
     */
    @Override
    public String toString() {
        return Long.toHexString(number).toUpperCase();
    }
}
